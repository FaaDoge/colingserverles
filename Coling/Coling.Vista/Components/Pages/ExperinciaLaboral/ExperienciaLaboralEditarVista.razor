@page "/experiencialaborales/editar/{RowKey}"
@inject IExperienciaLaboralService servicio
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Editar Experiencia Laboral</h3>

@if (experienciaLaboral != null)
{
    <ExperienciaLaboralFormularioVista @ref="insform" experienciaLaboral="experienciaLaboral" OnValidSubmit="Editar" Cancelar="Navegar"></ExperienciaLaboralFormularioVista>
}
else
{
    <p>Cargando...</p>
}

@code {
    [Parameter]
    public string RowKey { get; set; }
    private ExperienciaLaboralFormularioVista? insform;
    private ExperienciaLaboral experienciaLaboral;
    string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoidXNlciIsInJvbCI6IkFkbWluIiwiZXN0YWRvIjoiQWN0aXZvIiwiZXhwIjoxNzE0MDA1NDA3fQ.0xvrU50bm9jqZxt9Di41-7fh83opvqoTCoaNNw8yKAU";

    protected override async Task OnInitializedAsync()
    {
        var respuesta = await servicio.ListaID(RowKey, token);
        experienciaLaboral = respuesta;
    }

    private async Task Editar()
    {
        var respuesta = await servicio.Editar(experienciaLaboral, token);
        if (!respuesta)
        {
            await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
            return;
        }
        Navegar();
    }

    private void Navegar()
    {
        insform!.formularioPostOk = true;
        nav.NavigateTo("/experienciaslaborales", forceLoad: true);
    }
}
